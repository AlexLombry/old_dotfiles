" Disable vi compatibility
set nocompatible

set autoread " Autoread the file if modified outside of Vim
" source plugins file
so ~/.dotfiles/vim/plugins.vim

syntax enable
" Make backspace behave like every other editor.
set backspace=indent,eol,start

"The default is \, but a comma is much better.
let mapleader = ','

" Let's activate line numbers.
" set relativenumber
set noswapfile
set laststatus=2 " Always show the status bar
set cursorline " Highlight the line where is the cursor
set mouse=a " Enable mouse scrooling (just in case)
set title " Show current editing file in title (tab title for example)

" Swap and backup file options
set noswapfile
set nobackup
set nowb

" remove trailing whitespaces
command! FixWhitespace :%s/\s\+$//e

let base16colorspace=256

"
" Sample command W
"
command W :execute ':silent w !sudo tee % > /dev/null' | :edit!
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

"" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT
nnoremap <silent> <S-t> :tabnew<CR>

"" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" fast save and quit
nmap <leader>w :w<cr>
nmap <leader>q :q<cr>
nmap <leader>wq :wq!<cr>

" Down is really the next line
nnoremap j gj
nnoremap k gk

" Run PHPUnit tests
" map <Leader>t :!phpunit %<cr>

"Auto change directory to match current file ,cd
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

"" Opens an edit command with the path of the currently edited file filled in
noremap <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

"" Opens a tab edit command with the path of the currently edited file filled
noremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

"" fzf.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__

let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" The Silver Searcher
if executable('ag')
  let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
  set grepprg=ag\ --nogroup\ --nocolor
endif

" terminal emulation
nnoremap <silent> <leader>sh :terminal<CR>

"-------------Visuals--------------"
" set background=$BACKGROUND
" colorscheme $THEME
"Use 256 colors. This is useful for Terminal Vim.
set t_CO=256
set background=dark
" colorscheme minimalist
colorscheme base16-tomorrow
let g:solarized_termcolors=256

set anti enc=utf-8
set guifont=Source\ Code\ Pro\ for\ Powerline":h13

set guioptions-=e           "We don't want Gui tabs.
set linespace=15            "Macvim-specific line-height.

set guioptions-=l           "Disable Gui scrollbars.
set guioptions-=L
set guioptions-=r
set guioptions-=R
set guioptions-=T

"-------------Search--------------"
set hlsearch                "Highlight all matched terms.
set incsearch               "Incrementally highlight, as we type.

"-------------Split Management--------------"
set splitbelow              "Make splits default to below...
set splitright              "And to the right. This feels more natural.

set go-=L " Removes left hand scroll bar

set linespace=5
set termencoding=utf-8
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

" Indentation options
set autoindent               " always set autoindenting on
set expandtab                " expand tabs by default (overloadable per file type later)
set tabstop=4                " a tab is four spaces
set smarttab
set softtabstop=4            " when hitting <BS>, pretend like a tab is removed, even if spaces
set shiftwidth=4             " number of spaces to use for autoindenting

set nohidden
set showmode                 " always show what mode we're currently editing in
set nowrap                   " don't wrap lines
set tags=tags
set shiftround               " use multiple of shiftwidth when indenting with '<' and '>'
set number                   " always show line numbers

" -- Search
set ignorecase               " ignore case when searching
set smartcase                " ignore case if search pattern is all lowercase,
set timeout timeoutlen=200 ttimeoutlen=100

" -- Beep
set visualbell               " don't beep
set noerrorbells             " don't beep
set autowrite                " Save on buffer switch
set showmatch
set showcmd                  " show command in status line
set scrolloff=1
set lazyredraw               " Don't redraw the screen when running macros.
set wildmode=list:full,full
set encoding=utf-8 " Necessary to show Unicode glyphs
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
set wildignore+=*/vendor/**

" Set tags
set tags+=./tags.vendors,tags.vendors
set clipboard=unnamed

" fast scrolling
set ttyfast

" Retain buffer until quit
set hidden

" Line numbers are nice
" set ruler

"We'll set simpler mappings to switch between splits.
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-H> <C-W><C-H>
nmap <C-L> <C-W><C-L>

"-------------Mappings--------------"
"Make it easy to edit the Vimrc file.
nmap <Leader>vi :tabedit $MYVIMRC<cr>

"Quickly browse to any tag/symbol in the project.
"Tip: run ctags -R to regenerated the index.
nmap <Leader>f :tag<space>

" -------------Abbr ---------------"
abbr funciton function
abbr teh the
abbr tempalte template
abbr fitler filter
abbr dokcer docker

"-------------CTRL+P Plugin--------------"
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:30,results:30'

nmap <C-p> :CtrlP<cr>
nmap <C-r> :CtrlPBufTag<cr>
nmap <C-e> :CtrlPMRUFiles<cr>

"-------------NERDTree Configurations--------------"
nmap <C-b> :NERDTreeToggle<cr>
let g:NERDTreeDirArrowExpandable="+"
let NERDTreeHijackNetrw = 0
let g:NERDTreeDirArrowCollapsible="~"
let NERDTreeShowHidden=1
let NERDTreeMinimalUI=1

"-------------Auto-Commands--------------"

"Automatically source the Vimrc file on save.
augroup autosourcing
    autocmd!
    autocmd BufWritePost .vimrc source %
augroup END

"-------------PHP Scripting Sections--------------"
function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

autocmd FileType php inoremap <Leader>n <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>n :call PhpInsertUse()<CR>

function! IPhpExpandClass()
    call PhpExpandClass()
    call feedkeys('a', 'n')
endfunction

autocmd FileType php inoremap <Leader>nf <Esc>:call IPhpExpandClass()<CR>
autocmd FileType php noremap <Leader>nf :call PhpExpandClass()<CR>

vmap <Leader>su ! awk '{ print length(), $0 \| "sort -n \| cut -d\\  -f2-"}'<cr>


"-------------Tips and Reminders--------------"
" - Press 'zz' to instantly center the line where the cursor is located.
"------------/Tips and Reminders/-------------"

"Easy escaping to normal model
imap jk <esc>

" Run php linter on current file
map <Leader>l :!php -l %<cr>
nmap <leader>m :call PhpCsFixerFixFile()<cr>

" Auto-remove trailing spaces
autocmd BufWritePre *.php :%s/\s\+$//e

" Delete all buffer
nmap <silent> <Leader>da :exec "1," . bufnr('$') . "bd"<cr>
map <silent> <leader>b :bnext<cr>

" turn off nohlsearch
nmap <silent> <leader><Space> :nohlsearch<CR>

" Switch between files with
nnoremap <leader><leader> <c-^>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$

" Can be super anoying, when you type ( it expands the end of it
inoremap ( ()<left>
inoremap { {}<left>

" PHPActor config
setlocal omnifunc=phpactor#Complete
" Include use statement
nmap <Leader>u :call phpactor#UseAdd()<CR>

" Invoke the context menu
nmap <Leader>mm :call phpactor#ContextMenu()<CR>

" Invoke the navigation menu
nmap <Leader>nn :call phpactor#Navigate()<CR>

" Goto definition of class or class member under the cursor
nmap <Leader>o :call phpactor#GotoDefinition()<CR>

" Transform the classes in the current file
nmap <Leader>tt :call phpactor#Transform()<CR>

" Generate a new class (replacing the current file)
nmap <Leader>cc :call phpactor#ClassNew()<CR>

" Extract expression (normal mode)
nmap <silent><Leader>ee :call phpactor#ExtractExpression(v:false)<CR>

" Extract expression from selection
vmap <silent><Leader>ee :<C-U>call phpactor#ExtractExpression(v:true)<CR>

" Extract method from selection
vmap <silent><Leader>em :<C-U>call phpactor#ExtractMethod()<CR>
nnoremap <silent> gd :call phpactor#GotoDefinition()<CR>

" TESTING PURPOSE FOR NOW, DO THOSE HELPS ME TO USE VIM

" Ignore turds left behind by Mercurial.
let g:NERDTreeIgnore=['\.orig']

" The default of 31 is just a little too narrow.
let g:NERDTreeWinSize=40

" Disable display of '?' text and 'Bookmarks' label.
let g:NERDTreeMinimalUI=1

" Let <Leader><Leader> (^#) return from NERDTree window.
let g:NERDTreeCreatePrefix='silent keepalt keepjumps'

" Single-click to toggle directory nodes, double-click to open non-directory
" nodes.
let g:NERDTreeMouseMode=2

" Undo works persistent undo
if version >= 703
    set undofile
    set undodir=~/.vim/undodir
    silent !mkdir -p ~/.vim/undodir
endif

" Add the termdebug built-in plugin
if version >= 801
    packadd termdebug
endif
